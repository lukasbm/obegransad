#define P_EN D1
#define P_DI D2
#define P_CLK D3
#define P_CLA D4

// Waiting Time for Shift Cycle, can go downto 1
#define TT 5

static const uint8_t System6x7[] PROGMEM = {
    // Fixed width; char width table not used !!!!
    // FIRST 32 Characters omitted

    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (space)
    0x00, 0x00, 0x4f, 0x4f, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x03, 0x00,
    0x00, 0x0a, 0x3f, 0x0a, 0x3f, 0x0a,
    0x24, 0x2a, 0x7f, 0x2a, 0x7f, 0x12,
    0x23, 0x33, 0x18, 0x0c, 0x66, 0x62,
    0x3e, 0x3f, 0x6d, 0x6a, 0x30, 0x48,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
    0x00, 0x1c, 0x3e, 0x63, 0x63, 0x00,
    0x00, 0x00, 0x63, 0x63, 0x3e, 0x1c,
    0x2a, 0x1c, 0x7f, 0x7f, 0x1c, 0x2a,
    0x08, 0x08, 0x3e, 0x3e, 0x08, 0x08,
    0x00, 0x00, 0xc0, 0xe0, 0x60, 0x00,
    0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
    0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
    0x20, 0x30, 0x18, 0x0c, 0x06, 0x02,
    0x3e, 0x7f, 0x63, 0x63, 0x7f, 0x3e, // 0
    0x00, 0x02, 0x7f, 0x7f, 0x00, 0x00, // 1
    0x62, 0x73, 0x7b, 0x6b, 0x6f, 0x66, // 2
    0x22, 0x63, 0x6b, 0x6b, 0x7f, 0x36, // 3
    0x0f, 0x0f, 0x08, 0x08, 0x7f, 0x7f, // 4
    0x2f, 0x6f, 0x6b, 0x6b, 0x7b, 0x3b, // 5
    0x3e, 0x7f, 0x6b, 0x6b, 0x7b, 0x3a, // 6
    0x03, 0x03, 0x7b, 0x7b, 0x0f, 0x07, // 7
    0x36, 0x7f, 0x6b, 0x6b, 0x7f, 0x36, // 8
    0x26, 0x6f, 0x6b, 0x6b, 0x7f, 0x3e, // 9
    0x00, 0x00, 0x36, 0x36, 0x00, 0x00,
    0x00, 0x00, 0x76, 0x36, 0x00, 0x00,
    0x00, 0x18, 0x3c, 0x66, 0x42, 0x00,
    0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x42, 0x66, 0x3c, 0x18,
    0x00, 0x02, 0x5b, 0x5b, 0x0f, 0x06,
    0x3c, 0x42, 0x4a, 0x56, 0x5c, 0x00,
    0x7e, 0x7f, 0x0b, 0x0b, 0x7f, 0x7e,
    0x7f, 0x7f, 0x6b, 0x6b, 0x7f, 0x36,
    0x3e, 0x7f, 0x77, 0x63, 0x63, 0x22,
    0x7f, 0x7f, 0x63, 0x63, 0x7f, 0x3e,
    0x7f, 0x7f, 0x6b, 0x6b, 0x63, 0x63,
    0x7f, 0x7f, 0x0b, 0x0b, 0x03, 0x03,
    0x3e, 0x7f, 0x63, 0x6b, 0x7b, 0x32,
    0x7f, 0x7f, 0x08, 0x08, 0x7f, 0x7f,
    0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00,
    0x00, 0x23, 0x63, 0x63, 0x7f, 0x3f,
    0x7f, 0x7f, 0x1c, 0x36, 0x63, 0x41,
    0x7f, 0x7f, 0x60, 0x60, 0x60, 0x60,
    0x7f, 0x7f, 0x03, 0x06, 0x03, 0x7f,
    0x7f, 0x7f, 0x0e, 0x18, 0x7f, 0x7f,
    0x3e, 0x7f, 0x63, 0x63, 0x7f, 0x3e,
    0x7f, 0x7f, 0x0b, 0x0b, 0x0f, 0x06,
    0x3e, 0x7f, 0x63, 0x73, 0x3f, 0x5e,
    0x7f, 0x7f, 0x1b, 0x3b, 0x7f, 0x6e,
    0x26, 0x6f, 0x6b, 0x6b, 0x7b, 0x32,
    0x03, 0x03, 0x7f, 0x7f, 0x03, 0x03,
    0x3f, 0x7f, 0x60, 0x60, 0x7f, 0x3f,
    0x0f, 0x7f, 0x78, 0x40, 0x7f, 0x0f,
    0x3f, 0x7f, 0x60, 0x78, 0x60, 0x3f,
    0x63, 0x77, 0x1c, 0x1c, 0x77, 0x63,
    0x07, 0x0f, 0x78, 0x78, 0x0f, 0x07,
    0x63, 0x73, 0x7b, 0x6f, 0x67, 0x63,
    0x7d, 0x7e, 0x0b, 0x0b, 0x7e, 0x7d,
    0x3d, 0x7e, 0x66, 0x66, 0x7e, 0x3d,
    0x3d, 0x7d, 0x60, 0x60, 0x7d, 0x3d,
    0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
    0x7e, 0x7f, 0x0b, 0x0b, 0x7f, 0x7e,
    0x7f, 0x7f, 0x6b, 0x6b, 0x7f, 0x36,
    0x3e, 0x7f, 0x77, 0x63, 0x63, 0x22,
    0x7f, 0x7f, 0x63, 0x63, 0x7f, 0x3e,
    0x7f, 0x7f, 0x6b, 0x6b, 0x63, 0x63,
    0x7f, 0x7f, 0x0b, 0x0b, 0x03, 0x03,
    0x3e, 0x7f, 0x63, 0x6b, 0x7b, 0x32,
    0x7f, 0x7f, 0x08, 0x08, 0x7f, 0x7f,
    0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00,
    0x00, 0x23, 0x63, 0x63, 0x7f, 0x3f,
    0x7f, 0x7f, 0x1c, 0x36, 0x63, 0x41,
    0x7f, 0x7f, 0x60, 0x60, 0x60, 0x60,
    0x7f, 0x7f, 0x03, 0x06, 0x03, 0x7f,
    0x7f, 0x7f, 0x0e, 0x18, 0x7f, 0x7f,
    0x3e, 0x7f, 0x63, 0x63, 0x7f, 0x3e,
    0x7f, 0x7f, 0x0b, 0x0b, 0x0f, 0x06,
    0x3e, 0x7f, 0x63, 0x73, 0x3f, 0x5e,
    0x7f, 0x7f, 0x1b, 0x3b, 0x7f, 0x6e,
    0x66, 0x6f, 0x6b, 0x6b, 0x7b, 0x32,
    0x03, 0x03, 0x7f, 0x7f, 0x03, 0x03,
    0x3f, 0x7f, 0x60, 0x60, 0x7f, 0x3f,
    0x0f, 0x7f, 0x78, 0x40, 0x7f, 0x0f,
    0x3f, 0x7f, 0x60, 0x78, 0x60, 0x3f,
    0x63, 0x77, 0x1c, 0x1c, 0x77, 0x63,
    0x07, 0x0f, 0x78, 0x78, 0x0f, 0x07,
    0x63, 0x73, 0x7b, 0x6f, 0x67, 0x63,
    0x7d, 0x7e, 0x0b, 0x0b, 0x7e, 0x7d,
    0x3d, 0x7e, 0x66, 0x66, 0x7e, 0x3d,
    0x3d, 0x7d, 0x60, 0x60, 0x7d, 0x3d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// LUT For OBEGRÃ„NSAD
int lut[16][16] = {
    {23, 22, 21, 20, 19, 18, 17, 16, 7, 6, 5, 4, 3, 2, 1, 0},
    {24, 25, 26, 27, 28, 29, 30, 31, 8, 9, 10, 11, 12, 13, 14, 15},
    {39, 38, 37, 36, 35, 34, 33, 32, 55, 54, 53, 52, 51, 50, 49, 48},
    {40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63},
    {87, 86, 85, 84, 83, 82, 81, 80, 71, 70, 69, 68, 67, 66, 65, 64},
    {88, 89, 90, 91, 92, 93, 94, 95, 72, 73, 74, 75, 76, 77, 78, 79},
    {103, 102, 101, 100, 99, 98, 97, 96, 119, 118, 117, 116, 115, 114, 113, 112},
    {104, 105, 106, 107, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127},
    {151, 150, 149, 148, 147, 146, 145, 144, 135, 134, 133, 132, 131, 130, 129, 128},
    {152, 153, 154, 155, 156, 157, 158, 159, 136, 137, 138, 139, 140, 141, 142, 143},
    {167, 166, 165, 164, 163, 162, 161, 160, 183, 182, 181, 180, 179, 178, 177, 176},
    {168, 169, 170, 171, 172, 173, 174, 175, 184, 185, 186, 187, 188, 189, 190, 191},
    {215, 214, 213, 212, 211, 210, 209, 208, 199, 198, 197, 196, 195, 194, 193, 192},
    {216, 217, 218, 219, 220, 221, 222, 223, 200, 201, 202, 203, 204, 205, 206, 207},
    {231, 230, 229, 228, 227, 226, 225, 224, 247, 246, 245, 244, 243, 242, 241, 240},
    {232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255}};

static uint8_t panel_buf[16 * 16];

void panel_init()
{
    pinMode(P_CLA, OUTPUT);
    pinMode(P_CLK, OUTPUT);
    pinMode(P_DI, OUTPUT);
    pinMode(P_EN, OUTPUT);
}

// Clear the Panel Buffer
void panel_clear()
{
    for (int i = 0; i < 256; i++)
    {
        panel_buf[i] = 0;
    }
}

// SCAN DISPLAY, output Bytes to Serial to display
void panel_scan(uint8_t cmask, int brightness)
{
    panel_setBrightness(255);
    delayMicroseconds(TT);

    uint8_t w = 0;
    for (int i = 256; i > 0; i--)
    {
        digitalWrite(P_DI, cmask & panel_buf[w++]);
        digitalWrite(P_CLK, HIGH);
        digitalWrite(P_CLK, LOW);

    } // update 2024/01/01 speedup
    digitalWrite(P_CLA, HIGH);
    digitalWrite(P_CLA, LOW);
    panel_setBrightness(brightness); // re enable brightness
}

void panel_setPixel(int8_t x, int8_t y, uint8_t color)
{
    if ((x < 16) && (y < 16))
    {
        panel_buf[lut[y][x]] = color;
    }
}

void panel_fillGrid(uint8_t col)
{
    for (uint8_t x = 0; x < 16; x++)
        for (uint8_t y = 0; y < 16; y++)
            panel_setPixel(x, y, col);
}

void panel_debugTest()
{
    for (int i = 0; i < 2; i++)
    {
        panel_fillGrid(0xff);
        panel_scan(1, 100);
        analogWrite(P_EN, 250);
        delay(300);
        panel_fillGrid(0x00);
        panel_scan(1, 100);
        analogWrite(P_EN, 250);
        delay(300);
    }
}

void panel_printChar(uint8_t xs, uint8_t ys, char ch)
{
    uint8_t d;

    for (uint8_t x = 0; x < 6; x++)
    {

        d = pgm_read_byte_near((ch - 32) * 6 + // Buchstabennummer (ASCII ) minus 32 da die ersten 32 Zeichen nicht im Font sind
                               x +             // jede Spalte
                               System6x7);     // Adrress of Font

        if ((d & 1) == 1)
            panel_setPixel(x + xs, 0 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 0 + ys, 0);
        if ((d & 2) == 2)
            panel_setPixel(x + xs, 1 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 1 + ys, 0);
        if ((d & 4) == 4)
            panel_setPixel(x + xs, 2 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 2 + ys, 0);
        if ((d & 8) == 8)
            panel_setPixel(x + xs, 3 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 3 + ys, 0);
        if ((d & 16) == 16)
            panel_setPixel(x + xs, 4 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 4 + ys, 0);
        if ((d & 32) == 32)
            panel_setPixel(x + xs, 5 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 5 + ys, 0);
        if ((d & 64) == 64)
            panel_setPixel(x + xs, 6 + ys, 0xFF);
        else
            panel_setPixel(x + xs, 6 + ys, 0);
    }
}

void panel_setBrightness(uint8_t brightness)
{
    analogWrite(P_EN, brightness);
}